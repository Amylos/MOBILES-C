/*
 * app.c
 *
 *  Created on: 20 déc. 2021
 *      Author: Garnier
 */

#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<SDL2/SDL.h>

#include"mobile.h"
#include"app.h"

/*********************  Bits Mask Manipulation Macros  *******************/
#define mBitsSet(f,m)	((f) |= (m))
#define	mBitsClr(f,m)	((f)&=(~(m)))
#define	mBitsTgl(f,m)	((f)^=(m))
#define	mBitsMsk(f,m)	((f)&(m))
#define	mIsBitsSet(f,m)	(((f)&(m))==(m))
#define	mIsBitClr(f,m)	(((~(f))&(m))==(m))

/**********  Enumerate Application Status Masks Type Definition ***********/
typedef enum eappFLagsMasks{
	ST_APP_ALL_CLEARED		=	0x00000000,
	ST_APP_INIT_FAILED		=	0x80000000,
	ST_APP_INIT_INITIATED	=	0x00000001,
}t_appFLagsMasks;

/********************  Application Structure Definition ******************/
struct s_app{
	t_appFLagsMasks	uStatus;
	SDL_Window		*pWindow;
	SDL_Renderer	*pRenderer;
	SDL_TimerID		timerID;
	SDL_Event		sEvent;
	/*-----------------------------*/
	SDL_Rect		sceneArea;
	t_mobile		*mobiles[APP_MOBILE_NB_MAX];
	t_mobile		*pMobile;
	int				iPosX;
	int 			iPosY;
	int				iSpeedX;
	int				iSpeedY;
	int				iLive;
	SDL_Color		cMobilesColor;
};

/*****************  Animation Callback Function Prototype ****************/
Uint32 _AppTimerCallBack(Uint32 interval, t_app*pApp);


/*************** Public Application Function Implementation **************/

t_app*AppCreate(void){
	srand((unsigned int) time(NULL));
/*****************  Memory Allocation to pApp ***********************/
	t_app*pApp = (t_app*)malloc(sizeof(t_app));

	if(pApp == NULL){
		printf("MEMORY ALLOCATION FAILED : AppCreate() : pApp");
		return pApp;
	}

	*pApp =(t_app){

		.uStatus 	= ST_APP_ALL_CLEARED,
		.pWindow 	= NULL,
		.pRenderer 	= NULL,
		.sceneArea	= NULL,
		.timerID	= (int)NULL,
		.iPosX		= rand()%(APP_WINDOW_WIDTH/2-APP_WINDOW_WIDTH/3)+APP_WINDOW_WIDTH/3,
		.iPosY		= rand()%(APP_WINDOW_HEIGHT/2-APP_WINDOW_HEIGHT/3)+APP_WINDOW_HEIGHT/3,
		.iSpeedY	= rand()%(10)+5,
		.iLive		= rand()%(30)+10,
	};

	pApp->cMobilesColor=(SDL_Color){
		.r=rand()%(255-1)+100,
		.g=rand()%(255-1)+100,
		.b=rand()%(255-1)+100,
		.a=255,
	};
/*************************/
	if(SDL_Init(SDL_INIT_VIDEO) !=0){

			fprintf(stderr, "SDL video initialization failed %s \n",SDL_GetError());
			mBitsSet(pApp->uStatus,ST_APP_INIT_FAILED);
			return pApp;
		}
	else{
		mBitsSet(pApp->uStatus,ST_APP_INIT_INITIATED);
	}

/*************************  Window Creation ************************/
	pApp->pWindow = SDL_CreateWindow(
			APP_WINDOW_TITLE,
			SDL_WINDOWPOS_CENTERED,
			SDL_WINDOWPOS_CENTERED,
			APP_WINDOW_WIDTH,
			APP_WINDOW_HEIGHT,
			SDL_WINDOW_SHOWN
	);
	if(pApp->pWindow==NULL){
		fprintf(stderr, "Failed to create window %s\n",SDL_GetError());
		mBitsSet(pApp->uStatus,ST_APP_INIT_FAILED);
		return pApp;
	}

/*********************** Scene Area Creation **************************/

	pApp->sceneArea=(SDL_Rect){
		.x=APP_WINDOW_PADDING_HRZ,
		.y=APP_WINDOW_PADDING_TOP,
		.h=APP_WINDOW_HEIGHT-APP_WINDOW_PADDING_TOP-APP_WINDOW_PADDING_BOT,
		.w=APP_WINDOW_WIDTH-APP_WINDOW_PADDING_HRZ*2,

	};

/**********************  Renderer Initialization  *********************/

		pApp->pRenderer = SDL_CreateRenderer(pApp->pWindow, -1, SDL_RENDERER_ACCELERATED);
		if(pApp->pRenderer == NULL){
			fprintf(stderr,"Failed to create accelerated renderer. \n");
			pApp->pRenderer = SDL_CreateRenderer(pApp->pWindow, -1, SDL_RENDERER_SOFTWARE);
			if(pApp->pRenderer == NULL){
				fprintf(stderr,"Failed to create software renderer. \n");
				mBitsSet(pApp->uStatus,ST_APP_INIT_FAILED);
				return pApp;
			}
			fprintf(stderr,"Software renderer created instead!\n");
		}

/*****************  Draw Window And Scene Area  *********************/
		SDL_SetRenderDrawColor(pApp->pRenderer, APP_WINDOW_COLOR_BKGND.r, APP_WINDOW_COLOR_BKGND.g, APP_WINDOW_COLOR_BKGND.b, APP_WINDOW_COLOR_BKGND.a);
		SDL_RenderClear(pApp->pRenderer);

		SDL_SetRenderDrawColor(pApp->pRenderer,APP_WINDOW_COLOR_DELIMITING.r,APP_WINDOW_COLOR_DELIMITING.g,APP_WINDOW_COLOR_DELIMITING.b,APP_WINDOW_COLOR_DELIMITING.a);
		SDL_RenderDrawRect(pApp->pRenderer,&pApp->sceneArea);
		SDL_RenderPresent(pApp->pRenderer);

	return (pApp);
}


int AppRun(t_app*pApp){

	pApp->pMobile=MobileCreate(pApp->iPosX,pApp->iPosY,APP_MOBILE_SIZE,pApp->iSpeedX,pApp->iSpeedY,pApp->iLive,pApp->cMobilesColor);
	pApp->mobiles[0]=pApp->pMobile;
	MobileDraw(pApp->pMobile, pApp->pRenderer);


	int quit = 0;
	while(!quit){
			while(SDL_PollEvent(&pApp->sEvent)){
				SDL_SetWindowTitle(pApp->pWindow, APP_WINDOW_TITLE);
				switch(pApp->sEvent.type){
				case SDL_MOUSEMOTION:
					break;
				case SDL_MOUSEBUTTONUP:
					switch(pApp->sEvent.button.button){
					case SDL_BUTTON_LEFT:
						break;
					case SDL_BUTTON_RIGHT:
						break;
					default:
						break;
					break;
					}
					break;
				case SDL_QUIT:
					quit = 1;
					break;
				case SDL_KEYUP:
					switch(pApp->sEvent.key.keysym.sym){
					case SDLK_ESCAPE:
					case SDLK_q:
						pApp->sEvent.type = SDL_QUIT;
						SDL_PushEvent(&pApp->sEvent);
						break;
					default:
						break;
					}
					break;
				default:
					break;
				}
				/***FOR NOW***/
				SDL_RenderPresent(pApp->pRenderer);

			}
		}
	return 0;
}


t_app*AppDestroy(t_app*pApp){

	if(pApp == NULL) return NULL;
	pApp->mobiles[0]=MobileDestroy(pApp->pMobile);
	if(pApp->pRenderer)	SDL_DestroyRenderer(pApp->pRenderer);
	if(pApp->pWindow)	SDL_DestroyWindow(pApp->pWindow);
	if(mIsBitsSet(pApp->uStatus,ST_APP_INIT_INITIATED))	SDL_Quit();
	if(pApp)	free(pApp);

	return NULL;
}

/****************** Animating Callback Function Implementation  ***************/

Uint32 _AppTimerCallBack(Uint32 interval, t_app*pApp){

	return interval;
}


/********************** TRASH **************************/

//					if(IsAskRefresh()){
//						SDL_SetRenderDrawColor(pApp->pRenderer, SCENE_COLOR_BACKGROUND.r, SCENE_COLOR_BACKGROUND.g, SCENE_COLOR_BACKGROUND.b, SCENE_COLOR_BACKGROUND.a);
//						SDL_RenderClear(pApp->pRenderer);
//						DeminDraw(pApp->pDemin, pApp->pRenderer);
//						SDL_RenderPresent(pApp->pRenderer);
//						AskRefreshDone();
//					}
